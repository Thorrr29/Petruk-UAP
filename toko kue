#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <iomanip>
#include <fstream>
#include <cstdlib>

using namespace std;

template <typename T>
struct CakeSize {
    T size;
    double price;
};

template <typename T>
struct Cake {
    T name;
    T description;
    vector<CakeSize<T>> sizes;
};

template <typename T>
struct Order {
    T cakeName;
    T size;
    double price;
    bool confirmed;
};

template <typename T>
class User {
public:
    T username;
    T password;
    vector<Order<T>> orders;
};

template <typename T>
class Bakery {
private:
    vector<Cake<T>> cakes;
    unordered_map<T, User<T>> users;
    User<T>* loggedInUser = nullptr;

void loadUsersFromFile() {
        ifstream file("data.txt");
        if (file.is_open()) {
            T username, password;
            while (file >> username >> password) {
                users[username] = {username, password};
            }
            file.close();
        }
    }
void saveUserToFile(const User<T>& user) {
        ofstream file("data.txt", ios::app);
        if (file.is_open()) {
            file << user.username << " " << user.password << "\n";
            file.close();
        }
    }

public:
    Bakery() {
        cakes.push_back({"Chocolate Cake", "Delicious chocolate cake", {{"Small", 100000}, {"Medium", 150000}, {"Large", 200000}}});
        cakes.push_back({"Vanilla Cake", "Classic vanilla cake", {{"Small", 100000}, {"Medium", 125000}, {"Large", 170000}}});
        cakes.push_back({"Red Velvet Cake", "Smooth red velvet cake", {{"Small", 120000}, {"Medium", 180000}, {"Large", 240000}}});
        cakes.push_back({"Black Forest Cake", "Rich black forest cake", {{"Small", 130000}, {"Medium", 190000}, {"Large", 250000}}});
        cakes.push_back({"Cheesecake", "Creamy cheesecake", {{"Small", 140000}, {"Medium", 200000}, {"Large", 260000}}});
        cakes.push_back({"Carrot Cake", "Healthy carrot cake", {{"Small", 110000}, {"Medium", 160000}, {"Large", 210000}}});
        cakes.push_back({"Lemon Cake", "Tangy lemon cake", {{"Small", 100000}, {"Medium", 135000}, {"Large", 180000}}});
        cakes.push_back({"Strawberry Shortcake", "Sweet shortcake", {{"Small", 125000}, {"Medium", 175000}, {"Large", 225000}}});
        cakes.push_back({"Tiramisu", "Classic Italian tiramisu", {{"Small", 150000}, {"Medium", 220000}, {"Large", 290000}}});
        cakes.push_back({"Fruit Cake", "Fruit-rich cake", {{"Small", 160000}, {"Medium", 230000}, {"Large", 300000}}});

        loadUsersFromFile();
    }
void registerUser() {
        T username, password;
        cout << "Register user baru:\n";
        cout << "Masukkan username: ";
        cin >> username;
        cout << "Masukkan password: ";
        cin >> password;
        
        if(users.find(username) == users.end()) {
            User<T> newUser = {username, password};
            users[username] = newUser;
            saveUserToFile(newUser);
            cout << "User berhasil diregister!\n";
        } else {
            cout << "Username sudah diambil!\n";
        }
    }
bool loginUser() {
        T username, password;
        cout << "Login:\n";
        cout << "Masukkan username: ";
        cin >> username;
        cout << "Masukkan password: ";
        cin >> password;

        if(users.find(username) != users.end() && users[username].password == password) {
            loggedInUser = &users[username];
            cout << "Login Sukses!\n";
            system("cls");
            return true;
        } else {
            cout << "Username atau Password tidak valid!\n";
            return false;
        }
    }
void showCakeCatalog() {
        cout << "\nKatalog:\n";
        cout << "+------------------------------------------------------------------------------------+\n";
        cout << "| No |        Nama Cake        |         Keterangan         |     Ukuran dan Harga   |\n";
        cout << "+------------------------------------------------------------------------------------+\n";
        for (size_t i = 0; i < cakes.size(); ++i) {
            const auto& cake = cakes[i];
            cout << "| " << setw(2) << i + 1 << " | " << setw(22) << cake.name << "  | " << setw(25) << cake.description << "  |                        |\n";
            for (const auto& size : cake.sizes) {
                cout << "|    |                         |                            | " << setw(8) << size.size << ": Rp " << fixed << setprecision(0) << size.price <<"    |\n";
            }
            cout << "+------------------------------------------------------------------------------------+\n";
        }
        cout << "*Notes (Harga untuk 1 loyang)\n";
    }
void customizeAndOrderCake() {
        if (loggedInUser == nullptr) {
            cout << "Kamu harus login terlebih dahulu!\n";
            return;
        }

        vector<Order<T>> currentOrders;
        int cakeIndex, sizeIndex;
        T cakeName, size;
        double price = 0.0;

        while (true) {
            cout << "Masukkan nomor cake yang ingin kamu pesan: ";
            cin >> cakeIndex;

            if (cakeIndex < 1 || cakeIndex > cakes.size()) {
                cout << "Nomor cake tidak valid!\n";
                continue;
            }

            const auto& selectedCake = cakes[cakeIndex - 1];
            cakeName = selectedCake.name;

            cout << cakeName << " Tersedia dalam Ukuran dan Harga (per loyang):\n";
            for (size_t i = 0; i < selectedCake.sizes.size(); ++i) {
                cout << i + 1 << ". " << selectedCake.sizes[i].size << ": Rp " << fixed << setprecision(0) << selectedCake.sizes[i].price  << " (Harga untuk 1 loyang)\n";
            }

            cout << "Masukkan nomor Ukuran: ";
            cin >> sizeIndex;

            if (sizeIndex < 1 || sizeIndex > selectedCake.sizes.size()) {
                cout << "Nomor Ukuran tidak valid!\n";
                continue;
            }

            size = selectedCake.sizes[sizeIndex - 1].size;
            price = selectedCake.sizes[sizeIndex - 1].price * 0.5;

            Order<T> newOrder = {cakeName, size, price, false};
            currentOrders.push_back(newOrder);

            cout << "Apakah kamu ingin menambah pesanan? (yes/no): ";
            string addMore;
            cin >> addMore;
            if (addMore == "no") {
                break;
            }
        }

        cout << "\nKonfirmasi Pesanan:\n";
        double total = 0.0;
        for (const auto& order : currentOrders) {
            cout << "Cake: " << order.cakeName << ", Ukuran: " << order.size << ", Harga: Rp " << fixed << setprecision(0) << order.price << "\n";
            total += order.price;
        }
        cout << "Total Harga: Rp " << fixed << setprecision(0) << total << "\n";
        cout << "Apakah kamu ingin mengonfirmasi pesanan? (yes/no): ";

        string confirmation;
        cin >> confirmation;
        if (confirmation == "yes") {
            for (auto& order : currentOrders) {
                order.confirmed = true;
                loggedInUser->orders.push_back(order);
            }
            cout << "Konfirmasi pesanan berhasil!\n";
        } else {
            cout << "Pesanan dibatalkan.\n";
        }
    }
void showReceipt() {
        if (loggedInUser == nullptr) {
            cout << "Kamu harus login terlebih dahulu!\n";
            return;
        }

        cout << "+-------------------------------------------+\n";
        cout << "|         Receipt untuk " << left << setw(20) << loggedInUser->username << "|\n";
        cout << "+-------------------------------------------+\n";
        double total = 0.0;
        for (const auto& order : loggedInUser->orders) {
            cout << "| Cake: " << left << setw(34) << order.cakeName << "  |\n";
            cout << "| Ukuran: " << left << setw(34) << order.size << "|\n";
            cout << "| Harga: Rp " << left << setw(32) << fixed << setprecision(0) << order.price << "|\n";
            cout << "+-------------------------------------------+\n";
            total += order.price;
        }
        cout << "| Total: Rp " << left << setw(30) << fixed << setprecision(0) << total << "  |\n";
        cout << "+-------------------------------------------+\n";
    }

#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <iomanip>
#include <fstream>
#include <cstdlib>

using namespace std;

template <typename T>
struct CakeSize {
    T size;
    double price;
};

template <typename T>
struct Cake {
    T name;
    T description;
    vector<CakeSize<T>> sizes;
};

template <typename T>
struct Order {
    T cakeName;
    T size;
    double price;
    bool confirmed;
};

template <typename T>
class User {
public:
    T username;
    T password;
    vector<Order<T>> orders;
};

template <typename T>
class Bakery {
private:
    vector<Cake<T>> cakes;
    unordered_map<T, User<T>> users;
    User<T>* loggedInUser = nullptr;

void loadUsersFromFile() {
        ifstream file("data.txt");
        if (file.is_open()) {
            T username, password;
            while (file >> username >> password) {
                users[username] = {username, password};
            }
            file.close();
        }
    }
void saveUserToFile(const User<T>& user) {
        ofstream file("data.txt", ios::app);
        if (file.is_open()) {
            file << user.username << " " << user.password << "\n";
            file.close();
        }
    }

public:
    Bakery() {
        cakes.push_back({"Chocolate Cake", "Delicious chocolate cake", {{"Small", 100000}, {"Medium", 150000}, {"Large", 200000}}});
        cakes.push_back({"Vanilla Cake", "Classic vanilla cake", {{"Small", 100000}, {"Medium", 125000}, {"Large", 170000}}});
        cakes.push_back({"Red Velvet Cake", "Smooth red velvet cake", {{"Small", 120000}, {"Medium", 180000}, {"Large", 240000}}});
        cakes.push_back({"Black Forest Cake", "Rich black forest cake", {{"Small", 130000}, {"Medium", 190000}, {"Large", 250000}}});
        cakes.push_back({"Cheesecake", "Creamy cheesecake", {{"Small", 140000}, {"Medium", 200000}, {"Large", 260000}}});
        cakes.push_back({"Carrot Cake", "Healthy carrot cake", {{"Small", 110000}, {"Medium", 160000}, {"Large", 210000}}});
        cakes.push_back({"Lemon Cake", "Tangy lemon cake", {{"Small", 100000}, {"Medium", 135000}, {"Large", 180000}}});
        cakes.push_back({"Strawberry Shortcake", "Sweet shortcake", {{"Small", 125000}, {"Medium", 175000}, {"Large", 225000}}});
        cakes.push_back({"Tiramisu", "Classic Italian tiramisu", {{"Small", 150000}, {"Medium", 220000}, {"Large", 290000}}});
        cakes.push_back({"Fruit Cake", "Fruit-rich cake", {{"Small", 160000}, {"Medium", 230000}, {"Large", 300000}}});

        loadUsersFromFile();
    }
void registerUser() {
        T username, password;
        cout << "Register user baru:\n";
        cout << "Masukkan username: ";
        cin >> username;
        cout << "Masukkan password: ";
        cin >> password;
        
        if(users.find(username) == users.end()) {
            User<T> newUser = {username, password};
            users[username] = newUser;
            saveUserToFile(newUser);
            cout << "User berhasil diregister!\n";
        } else {
            cout << "Username sudah diambil!\n";
        }
    }
bool loginUser() {
        T username, password;
        cout << "Login:\n";
        cout << "Masukkan username: ";
        cin >> username;
        cout << "Masukkan password: ";
        cin >> password;

        if(users.find(username) != users.end() && users[username].password == password) {
            loggedInUser = &users[username];
            cout << "Login Sukses!\n";
            system("cls");
            return true;
        } else {
            cout << "Username atau Password tidak valid!\n";
            return false;
        }
    }
